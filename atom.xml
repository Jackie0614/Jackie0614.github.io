<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>朝惜</title>
  <subtitle>浮生如梦 只争朝夕</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Jackie0614.github.io/"/>
  <updated>2017-04-16T14:05:04.033Z</updated>
  <id>http://Jackie0614.github.io/</id>
  
  <author>
    <name>Jackie_ma</name>
    <email>1058236163@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js闭包问题详解</title>
    <link href="http://Jackie0614.github.io/2017/04/16/js%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://Jackie0614.github.io/2017/04/16/js闭包问题详解/</id>
    <published>2017-04-16T11:25:57.000Z</published>
    <updated>2017-04-16T14:05:04.033Z</updated>
    
    <content type="html"><![CDATA[<p>今天在网上看见了一道很有意思的面试题，是考察js闭包方面的知识的，js闭包知识是js中的重点和难点，现在我就依照这个面试题，谈谈我对js闭包方面的理解。<br>首先，我来谈谈js中的内存机制，js内存机制中，有一种垃圾回收机制，即是当一个函数执行完毕后，会回收当前函数所占用的内存，从而为其他函数腾出内存来，这本身是无可厚非，而且是一种提高脚本运行效率的有效机制。然而，并非所有的js函数事件都需要执行完毕后就消除该函数，因为，我们还有可能在后续的函数中调用该函数中的参数，所以闭包的威力就显现出来了，接下来，我就用实例来说明js中的内存运行机制</p>
<h2 id="闭包的小实例"><a href="#闭包的小实例" class="headerlink" title="闭包的小实例"></a>闭包的小实例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>()&#123;</div><div class="line">          var a=1;</div><div class="line">          <span class="built_in">return</span> <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">              a++;</div><div class="line">              console.log(a);</div><div class="line">          &#125;;</div><div class="line">      &#125;</div><div class="line">          fn();</div><div class="line">          fn()()//2;</div><div class="line">          var b=fn();</div><div class="line">          b();//2</div><div class="line">          b();//3</div><div class="line">          fn()();//2</div></pre></td></tr></table></figure>
<p>上段代码代码中fn()最后输出的是什么呢？我在chrom控制台打印了这个执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">function</span></span> ()&#123;</div><div class="line">                a++;</div><div class="line">                console.log(a);</div><div class="line">            &#125;</div></pre></td></tr></table></figure></p>
<p>所以fn()()执行的就是嵌套函数里面的进程，因此执行的是a++。为2；<br>那么var b=fn();是什么意思呢，我的理解就是将return 里面的函数当做一个值来传递，而且他们的这个值有一个共同的指针，也就是说用来存放值的内存相同，不信，你看b();执行两次之后的结果为啥，为3。为什么，因为他们的指针指向同一个地方，所以执行两次，第二次执行的用的a的参数还是从第一个b函数中读取的，并不会被内存回收。因为return function(){..};函数调用了外层函数的参数a，即这个a是一直存在函数内存中的，被调用的函数参数是无法被回收的，因此内存是一直占用的，这就是闭包。<br>接下来我们来看再一次执行fn()(),还是2，为什么，因为他原来占用的内存被回收了，执行此次结果相当于重新分配一个内存给该函数，<br>归根结底从作用域的角度来讲，还是说闭包的作用域是一直存在，不会消失，而且能够访问外部函数，这就是闭包。<br>接下来我们再来看看我今天遇见的一个面试题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(var i=1;i&lt;=5;i++)&#123;</div><div class="line">             <span class="built_in">set</span>Timeout(<span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>()&#123;</div><div class="line">                 console.log(i);&#125;,i*1000)</div><div class="line">         &#125;</div></pre></td></tr></table></figure></p>
<p>这个结果是啥呢，也许你会脱口而出是1,2,3,4,5，NO NO NO，绝对不会是你想的这样简单，当然也不会更复杂，我贴出答案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">for</span>(var i=1;i&lt;=5;i++)&#123;</div><div class="line">                <span class="built_in">set</span>Timeout(<span class="keyword">function</span> <span class="function"><span class="title">fn</span></span>()&#123;</div><div class="line">                    console.log(i);&#125;,i*1000)</div><div class="line">            &#125;</div><div class="line">27010</div><div class="line">5VM308:3 6</div></pre></td></tr></table></figure></p>
<p>一共打印出5个6，为什么，你们自己思考</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在网上看见了一道很有意思的面试题，是考察js闭包方面的知识的，js闭包知识是js中的重点和难点，现在我就依照这个面试题，谈谈我对js闭包方面的理解。&lt;br&gt;首先，我来谈谈js中的内存机制，js内存机制中，有一种垃圾回收机制，即是当一个函数执行完毕后，会回收当前函数所占用
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何实现二级下拉菜单</title>
    <link href="http://Jackie0614.github.io/2017/04/12/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BA%A7%E4%B8%8B%E6%8B%89%E8%8F%9C%E5%8D%95/"/>
    <id>http://Jackie0614.github.io/2017/04/12/如何实现二级下拉菜单/</id>
    <published>2017-04-12T15:28:48.000Z</published>
    <updated>2017-04-16T12:59:14.122Z</updated>
    
    <content type="html"><![CDATA[<p>今天去旁听计科学院的课，老师用jq实现了一个二级下拉菜单，现在写出来分享给大家，实现过程比较简单，jq部分是比较简单的，有点难度的是css部分</p>
<h2 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h2><p>css部分主要是把a标签转化成块级元素，消除li的padding属性，然后就是运用displayde属性，使他们隐藏。使他们的菜单跟栏目在一列，现在贴出css部分<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">ul,li,a&#123;</div><div class="line">          margin:0;</div><div class="line">          padding:0;</div><div class="line">      &#125;</div><div class="line">      ul &#123;</div><div class="line">          list-style: none;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">#nav li&#123;</span></div><div class="line">          text-align: center;</div><div class="line"></div><div class="line">      &#125;</div><div class="line">        ul li:hover&#123;</div><div class="line">          background: yellow;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">#nav li a&#123;</span></div><div class="line">          text-decoration: none;</div><div class="line">          display: block;</div><div class="line">          width: 80px;</div><div class="line">          height: 40px;</div><div class="line">          line-height: 40px;</div><div class="line">          background-color: gray;</div><div class="line">          margin:1px 1px 0 0 ;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">#nav&gt;li&#123;</span></div><div class="line">          <span class="built_in">float</span>: left;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">#nav&gt;li ul&#123;</span></div><div class="line">          display: none;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><p>js部分主要是注意this的使用，this这是个难点，我也不是很懂，不过这里只是一个简单的运用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#nav&gt;li"</span>).mouseover(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">           $(this).find(<span class="string">"ul"</span>).show();</div><div class="line">        &#125;)</div><div class="line">        $(<span class="string">"#nav&gt;li"</span>).mouseout(<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            /* Act on the event */</div><div class="line">            $(<span class="string">"#nav&gt;li ul"</span>).hide();</div><div class="line">        &#125;)</div></pre></td></tr></table></figure></p>
<p>以上就是本次代码了，如有错误，欢迎指正</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天去旁听计科学院的课，老师用jq实现了一个二级下拉菜单，现在写出来分享给大家，实现过程比较简单，jq部分是比较简单的，有点难度的是css部分&lt;/p&gt;
&lt;h2 id=&quot;css部分&quot;&gt;&lt;a href=&quot;#css部分&quot; class=&quot;headerlink&quot; title=&quot;css
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js算法基础</title>
    <link href="http://Jackie0614.github.io/2017/04/11/js%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>http://Jackie0614.github.io/2017/04/11/js算法基础/</id>
    <published>2017-04-11T14:28:55.000Z</published>
    <updated>2017-04-11T15:18:00.168Z</updated>
    
    <content type="html"><![CDATA[<p>我之前在fcc社区上面学习了一些js的基础算法，今天写出来分享给大家，也希望大家有些收获，能够在前端的道路上越走越远,</p>
<p>##反转字符串<br>翻转字符串这个是之前面试过程中经常遇到的一个算法题，大同小异，无非就是些简答字符串方法的应用，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">revStr</span></span>()&#123;</div><div class="line">  var narr=str.split(<span class="string">""</span>);//将字符串中的字符分割成数组</div><div class="line">  var revarr=narr.resverse();//将数组翻转</div><div class="line">  var revstr=revarr.join(<span class="string">""</span>);//将数组重新按照一定的规则组合起来 </div><div class="line">  <span class="built_in">return</span> revstr;</div><div class="line">&#125;</div><div class="line">revStr();</div></pre></td></tr></table></figure></p>
<p>##递归求阶乘<br>主要是将上一次运算的结果保留下来作为下一次运算的值，从而实现递归运算<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">function</span> numAdd(num)&#123;</div><div class="line">      <span class="built_in">return</span> (num*numAdd(num-1));</div><div class="line">&#125;</div><div class="line">numAdd(7);//7*6*5*4*3*2*1*0*-1....；会一直运算下去</div></pre></td></tr></table></figure></p>
<p>以上的7的阶乘会一直运算下去，所以我们来给他修改一下，加一个判断条件，防止他一直运算下去<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">function</span> numAdd(num)&#123;</div><div class="line">        <span class="keyword">if</span>(num&gt;0)&#123;//加一个判断条件，当num&gt;0时，执行以下代码</div><div class="line">            <span class="built_in">return</span> (num*numAdd(num-1));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我之前在fcc社区上面学习了一些js的基础算法，今天写出来分享给大家，也希望大家有些收获，能够在前端的道路上越走越远,&lt;/p&gt;
&lt;p&gt;##反转字符串&lt;br&gt;翻转字符串这个是之前面试过程中经常遇到的一个算法题，大同小异，无非就是些简答字符串方法的应用，&lt;br&gt;&lt;figure 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js密码强度验证</title>
    <link href="http://Jackie0614.github.io/2017/04/11/js%E5%AF%86%E7%A0%81%E5%BC%BA%E5%BA%A6%E9%AA%8C%E8%AF%81/"/>
    <id>http://Jackie0614.github.io/2017/04/11/js密码强度验证/</id>
    <published>2017-04-10T23:44:03.000Z</published>
    <updated>2017-04-10T23:45:25.490Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道在网页中，我们不可避免的要验证许多表单，因此我们今天就来写一个小的表单密码验证的小案例，来体会一下他的思想</p>
<h2 id="css代码就不写了"><a href="#css代码就不写了" class="headerlink" title="css代码就不写了"></a>css代码就不写了</h2><p>css代码很简单，我就不写了，大家可以下去自行写一下，没什么技术含量，下面我直接写js部分了</p>
<h2 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h2><p>首先我们要有思路，把他的几个部分分开，不能乱写，瞎写是吧？我就简单的把它分为两个部分：1.表单显示 2.密码强度检测<br>这两个事件之后我们就可以添加事件监听(声明：以下代码都以在chrome下运行为准)</p>
<h3 id="表单显示"><a href="#表单显示" class="headerlink" title="表单显示"></a>表单显示</h3><p>考虑到有多中情况，我们这里用到switch方法，可以考虑到多种情况。其次就是将switch中的参数结果计数方式依从密码强度检测中的计数方式，这是重点。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">putStr</span></span>()&#123;</div><div class="line">        var Lowcolor=document.getElementsByTagName(<span class="string">"div"</span>)[0].style.color;</div><div class="line">        var Midcolor=document.getElementsByTagName(<span class="string">"div"</span>)[1].style.color;</div><div class="line">        var Higcolor=document.getElementsByTagName(<span class="string">"div"</span>)[2].style.color;</div><div class="line">        var str=document.getElementById(<span class="string">"txt"</span>).value;</div><div class="line">            switch(Num(str))&#123;</div><div class="line">              <span class="keyword">case</span> 0:</div><div class="line">              alert(<span class="string">"请输入正确的密码形式：数字，字母和一些特殊符号"</span>);</div><div class="line">              <span class="built_in">break</span>;</div><div class="line">              <span class="keyword">case</span> 1:</div><div class="line">              Lowcolor=<span class="string">"red"</span>;</div><div class="line">              <span class="built_in">break</span>;</div><div class="line">              <span class="keyword">case</span> 2:</div><div class="line">              Lowcolor=Midcolor=<span class="string">"yellow"</span>;</div><div class="line">              <span class="built_in">break</span>;</div><div class="line">              <span class="keyword">case</span> 3:</div><div class="line">              Lowcolor=Midcolor=Higcolor=<span class="string">"green"</span>;</div><div class="line">              <span class="built_in">break</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
<h3 id="密码强度检测"><a href="#密码强度检测" class="headerlink" title="密码强度检测"></a>密码强度检测</h3><p>这里我们用到简单的正则验证，加上一些if语句的应用，贴上代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> Num(y)&#123;</div><div class="line">           var x=0;</div><div class="line">           <span class="keyword">if</span>(str.match(/[0-9]/))&#123;</div><div class="line">               x++;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span>(str.match(/[a-z]/))&#123;</div><div class="line">               x++;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">if</span>(str.match(/[^0-9a-z]/))&#123;</div><div class="line">               x++</div><div class="line">           &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>这里我要说明一下。就是关于编程函数思想，就是将A函数中的参数转换成B函数中的结果，达到函数之间互相联系的结果，这是重要的一种思想。<br>最后在这里添加一个事件监听，就大功告成了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">addEventListener(<span class="string">"click"</span>,putStr,<span class="literal">false</span>);</div><div class="line">removeEventListener(<span class="string">"click"</span>,putStr,<span class="literal">false</span>);</div><div class="line">addEventListener(<span class="string">"blur"</span>,putStr,<span class="literal">false</span>);</div><div class="line">removeEventListener(<span class="string">"blur"</span>,putStr,<span class="literal">false</span>);</div></pre></td></tr></table></figure></p>
<p>以上就是这次表单检测的全部结果了，如有不正之处，欢迎指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道在网页中，我们不可避免的要验证许多表单，因此我们今天就来写一个小的表单密码验证的小案例，来体会一下他的思想&lt;/p&gt;
&lt;h2 id=&quot;css代码就不写了&quot;&gt;&lt;a href=&quot;#css代码就不写了&quot; class=&quot;headerlink&quot; title=&quot;css代码就不写了
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Jackie0614.github.io/2017/03/29/hello-world/"/>
    <id>http://Jackie0614.github.io/2017/03/29/hello-world/</id>
    <published>2017-03-29T14:30:45.472Z</published>
    <updated>2017-03-29T14:30:45.472Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
