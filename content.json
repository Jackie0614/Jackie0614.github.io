{"meta":{"title":"朝惜","subtitle":"浮生如梦 只争朝夕","description":"前端开发","author":"Jackie_ma","url":"http://Jackie0614.github.io"},"pages":[{"title":"","date":"2017-04-06T12:28:56.098Z","updated":"2017-04-06T12:28:56.098Z","comments":false,"path":"tags/index.html","permalink":"http://Jackie0614.github.io/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-04-06T12:22:07.000Z","updated":"2017-04-06T12:22:07.197Z","comments":true,"path":"categories/index.html","permalink":"http://Jackie0614.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"js闭包问题详解","slug":"js闭包问题详解","date":"2017-04-16T11:25:57.000Z","updated":"2017-04-16T14:05:04.033Z","comments":true,"path":"2017/04/16/js闭包问题详解/","link":"","permalink":"http://Jackie0614.github.io/2017/04/16/js闭包问题详解/","excerpt":"","text":"今天在网上看见了一道很有意思的面试题，是考察js闭包方面的知识的，js闭包知识是js中的重点和难点，现在我就依照这个面试题，谈谈我对js闭包方面的理解。首先，我来谈谈js中的内存机制，js内存机制中，有一种垃圾回收机制，即是当一个函数执行完毕后，会回收当前函数所占用的内存，从而为其他函数腾出内存来，这本身是无可厚非，而且是一种提高脚本运行效率的有效机制。然而，并非所有的js函数事件都需要执行完毕后就消除该函数，因为，我们还有可能在后续的函数中调用该函数中的参数，所以闭包的威力就显现出来了，接下来，我就用实例来说明js中的内存运行机制 闭包的小实例12345678910111213function fn()&#123; var a=1; return function()&#123; a++; console.log(a); &#125;; &#125; fn(); fn()()//2; var b=fn(); b();//2 b();//3 fn()();//2 上段代码代码中fn()最后输出的是什么呢？我在chrom控制台打印了这个执行结果：1234function ()&#123; a++; console.log(a); &#125; 所以fn()()执行的就是嵌套函数里面的进程，因此执行的是a++。为2；那么var b=fn();是什么意思呢，我的理解就是将return 里面的函数当做一个值来传递，而且他们的这个值有一个共同的指针，也就是说用来存放值的内存相同，不信，你看b();执行两次之后的结果为啥，为3。为什么，因为他们的指针指向同一个地方，所以执行两次，第二次执行的用的a的参数还是从第一个b函数中读取的，并不会被内存回收。因为return function(){..};函数调用了外层函数的参数a，即这个a是一直存在函数内存中的，被调用的函数参数是无法被回收的，因此内存是一直占用的，这就是闭包。接下来我们来看再一次执行fn()(),还是2，为什么，因为他原来占用的内存被回收了，执行此次结果相当于重新分配一个内存给该函数，归根结底从作用域的角度来讲，还是说闭包的作用域是一直存在，不会消失，而且能够访问外部函数，这就是闭包。接下来我们再来看看我今天遇见的一个面试题1234for(var i=1;i&lt;=5;i++)&#123; setTimeout(function fn()&#123; console.log(i);&#125;,i*1000) &#125; 这个结果是啥呢，也许你会脱口而出是1,2,3,4,5，NO NO NO，绝对不会是你想的这样简单，当然也不会更复杂，我贴出答案：123456 for(var i=1;i&lt;=5;i++)&#123; setTimeout(function fn()&#123; console.log(i);&#125;,i*1000) &#125;270105VM308:3 6 一共打印出5个6，为什么，你们自己思考","categories":[],"tags":[]},{"title":"如何实现二级下拉菜单","slug":"如何实现二级下拉菜单","date":"2017-04-12T15:28:48.000Z","updated":"2017-04-16T12:59:14.122Z","comments":true,"path":"2017/04/12/如何实现二级下拉菜单/","link":"","permalink":"http://Jackie0614.github.io/2017/04/12/如何实现二级下拉菜单/","excerpt":"","text":"今天去旁听计科学院的课，老师用jq实现了一个二级下拉菜单，现在写出来分享给大家，实现过程比较简单，jq部分是比较简单的，有点难度的是css部分 css部分css部分主要是把a标签转化成块级元素，消除li的padding属性，然后就是运用displayde属性，使他们隐藏。使他们的菜单跟栏目在一列，现在贴出css部分1234567891011121314151617181920212223242526272829ul,li,a&#123; margin:0; padding:0; &#125; ul &#123; list-style: none; &#125; #nav li&#123; text-align: center; &#125; ul li:hover&#123; background: yellow; &#125; #nav li a&#123; text-decoration: none; display: block; width: 80px; height: 40px; line-height: 40px; background-color: gray; margin:1px 1px 0 0 ; &#125; #nav&gt;li&#123; float: left; &#125; #nav&gt;li ul&#123; display: none; &#125; js部分js部分主要是注意this的使用，this这是个难点，我也不是很懂，不过这里只是一个简单的运用1234567$(\"#nav&gt;li\").mouseover(function()&#123; $(this).find(\"ul\").show(); &#125;) $(\"#nav&gt;li\").mouseout(function()&#123; /* Act on the event */ $(\"#nav&gt;li ul\").hide(); &#125;) 以上就是本次代码了，如有错误，欢迎指正","categories":[],"tags":[]},{"title":"js算法基础","slug":"js算法基础","date":"2017-04-11T14:28:55.000Z","updated":"2017-04-11T15:18:00.168Z","comments":true,"path":"2017/04/11/js算法基础/","link":"","permalink":"http://Jackie0614.github.io/2017/04/11/js算法基础/","excerpt":"","text":"我之前在fcc社区上面学习了一些js的基础算法，今天写出来分享给大家，也希望大家有些收获，能够在前端的道路上越走越远, ##反转字符串翻转字符串这个是之前面试过程中经常遇到的一个算法题，大同小异，无非就是些简答字符串方法的应用，1234567function revStr()&#123; var narr=str.split(\"\");//将字符串中的字符分割成数组 var revarr=narr.resverse();//将数组翻转 var revstr=revarr.join(\"\");//将数组重新按照一定的规则组合起来 return revstr;&#125;revStr(); ##递归求阶乘主要是将上一次运算的结果保留下来作为下一次运算的值，从而实现递归运算1234 function numAdd(num)&#123; return (num*numAdd(num-1));&#125;numAdd(7);//7*6*5*4*3*2*1*0*-1....；会一直运算下去 以上的7的阶乘会一直运算下去，所以我们来给他修改一下，加一个判断条件，防止他一直运算下去12345 function numAdd(num)&#123; if(num&gt;0)&#123;//加一个判断条件，当num&gt;0时，执行以下代码 return (num*numAdd(num-1)); &#125;&#125;","categories":[],"tags":[]},{"title":"js密码强度验证","slug":"js密码强度验证","date":"2017-04-10T23:44:03.000Z","updated":"2017-04-10T23:45:25.490Z","comments":true,"path":"2017/04/11/js密码强度验证/","link":"","permalink":"http://Jackie0614.github.io/2017/04/11/js密码强度验证/","excerpt":"","text":"我们知道在网页中，我们不可避免的要验证许多表单，因此我们今天就来写一个小的表单密码验证的小案例，来体会一下他的思想 css代码就不写了css代码很简单，我就不写了，大家可以下去自行写一下，没什么技术含量，下面我直接写js部分了 js部分首先我们要有思路，把他的几个部分分开，不能乱写，瞎写是吧？我就简单的把它分为两个部分：1.表单显示 2.密码强度检测这两个事件之后我们就可以添加事件监听(声明：以下代码都以在chrome下运行为准) 表单显示考虑到有多中情况，我们这里用到switch方法，可以考虑到多种情况。其次就是将switch中的参数结果计数方式依从密码强度检测中的计数方式，这是重点。1234567891011121314151617181920function putStr()&#123; var Lowcolor=document.getElementsByTagName(\"div\")[0].style.color; var Midcolor=document.getElementsByTagName(\"div\")[1].style.color; var Higcolor=document.getElementsByTagName(\"div\")[2].style.color; var str=document.getElementById(\"txt\").value; switch(Num(str))&#123; case 0: alert(\"请输入正确的密码形式：数字，字母和一些特殊符号\"); break; case 1: Lowcolor=\"red\"; break; case 2: Lowcolor=Midcolor=\"yellow\"; break; case 3: Lowcolor=Midcolor=Higcolor=\"green\"; break; &#125; &#125; 密码强度检测这里我们用到简单的正则验证，加上一些if语句的应用，贴上代码123456789101112function Num(y)&#123; var x=0; if(str.match(/[0-9]/))&#123; x++; &#125; if(str.match(/[a-z]/))&#123; x++; &#125; if(str.match(/[^0-9a-z]/))&#123; x++ &#125; &#125; 这里我要说明一下。就是关于编程函数思想，就是将A函数中的参数转换成B函数中的结果，达到函数之间互相联系的结果，这是重要的一种思想。最后在这里添加一个事件监听，就大功告成了1234addEventListener(\"click\",putStr,false);removeEventListener(\"click\",putStr,false);addEventListener(\"blur\",putStr,false);removeEventListener(\"blur\",putStr,false); 以上就是这次表单检测的全部结果了，如有不正之处，欢迎指正。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-03-29T14:30:45.472Z","updated":"2017-03-29T14:30:45.472Z","comments":true,"path":"2017/03/29/hello-world/","link":"","permalink":"http://Jackie0614.github.io/2017/03/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}